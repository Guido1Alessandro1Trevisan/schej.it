definitions:
  models.CalendarEvent:
    properties:
      endDate:
        type: string
      startDate:
        type: string
      summary:
        type: string
    type: object
  models.Event:
    properties:
      _id:
        type: string
      dates:
        items:
          type: string
        type: array
      endDate:
        type: string
      endTime:
        type: number
      name:
        type: string
      ownerId:
        type: string
      responses:
        additionalProperties:
          $ref: '#/definitions/models.Response'
        description: Availability responses
        type: object
      startDate:
        type: string
      startTime:
        description: StartTime and EndTime are UTC hours, dates are an array of utc
          dates
        type: number
    type: object
  models.FriendRequest:
    properties:
      _id:
        type: string
      createdAt:
        type: string
      from:
        type: string
      fromUser:
        $ref: '#/definitions/models.UserProfile'
        type: object
      to:
        type: string
      toUser:
        $ref: '#/definitions/models.UserProfile'
        type: object
    type: object
  models.Response:
    properties:
      availability:
        items:
          type: string
        type: array
      name:
        type: string
      user:
        $ref: '#/definitions/models.UserProfile'
        type: object
      userId:
        type: string
    type: object
  models.UserProfile:
    properties:
      _id:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      picture:
        type: string
      visibility:
        type: integer
    type: object
  models.UserStatus:
    type: string
  responses.Error:
    properties:
      error:
        type: object
    required:
    - error
    type: object
host: localhost:3002
info:
  contact: {}
  description: This is the API for Schej.it!
  license: {}
  title: Schej.it API
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Signs user in and sets the access token session variable
      parameters:
      - description: Object containing the Google authorization code and the user's
          timezone offset
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              code:
                type: string
              timezoneOffset:
                type: integer
            type: object
      produces:
      - application/json
      responses:
        "200": {}
      summary: Signs user in
      tags:
      - auth
  /auth/sign-in-mobile:
    post:
      consumes:
      - application/json
      description: Signs user in and sets the access token session variable
      parameters:
      - description: Object containing the Google authorization code and the user's
          timezone offset
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              accessToken:
                type: string
              expiresIn:
                type: integer
              idToken:
                type: string
              refreshToken:
                type: string
              scope:
                type: string
              timezoneOffset:
                type: integer
            type: object
      produces:
      - application/json
      responses:
        "200": {}
      summary: Signs user in from mobile
      tags:
      - auth
  /auth/sign-out:
    post:
      consumes:
      - application/json
      description: Signs user out and deletes the session
      produces:
      - application/json
      responses:
        "200": {}
      summary: Signs user out
      tags:
      - auth
  /auth/status:
    get:
      description: Returns a 401 error if user is not signed in, 200 if they are
      responses:
        "200": {}
        "401":
          description: Error object
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Gets whether the user is signed in or not
      tags:
      - auth
  /events:
    post:
      consumes:
      - application/json
      parameters:
      - description: Object containing info about the event to create
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              endDate:
                type: string
              name:
                type: string
              startDate:
                type: string
            type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - type: object
            - properties:
                eventId:
                  type: string
              type: object
      summary: Creates a new event
      tags:
      - events
  /events/{eventId}:
    delete:
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200": {}
      summary: Deletes an event based on its id
      tags:
      - events
    get:
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
      summary: Gets an event based on its id
      tags:
      - events
  /events/{eventId}/response:
    post:
      consumes:
      - application/json
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      - description: Object containing info about the event response to update
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              availability:
                items:
                  type: string
                type: array
              guest:
                type: boolean
              name:
                type: string
            type: object
      produces:
      - application/json
      responses:
        "200": {}
      summary: Updates the current user's availability
      tags:
      - events
  /friends:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200": {}
      summary: Gets all of users current friends
      tags:
      - friends
  /friends/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ID of friend
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200": {}
      summary: Removes an existing friend
      tags:
      - friends
  /friends/{id}/calendar:
    get:
      consumes:
      - application/json
      parameters:
      - description: ID of friend
        in: path
        name: id
        required: true
        type: string
      - description: Lower bound for event's start time to filter by
        in: query
        name: timeMin
        required: true
        type: string
      - description: Upper bound for event's end time to filter by
        in: query
        name: timeMax
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CalendarEvent'
            type: array
      summary: Returns the specified friend's schedule
      tags:
      - friends
  /friends/{id}/status:
    get:
      consumes:
      - application/json
      parameters:
      - description: ID of friend
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - type: object
            - properties:
                eventName:
                  type: string
                status:
                  $ref: '#/definitions/models.UserStatus'
              type: object
      summary: Returns whether the friend is free or busy
      tags:
      - friends
  /friends/requests:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200": {}
      summary: Gets all the current incoming and outgoing friend requests
      tags:
      - friends
    post:
      consumes:
      - application/json
      parameters:
      - description: Object specifying the user IDs of who this request is sent from
          and to
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              to:
                type: string
            type: object
      produces:
      - application/json
      responses:
        "200":
          description: Friend request already exists from \"to\" to \"from\", and
            it was accepted
        "201":
          description: Friend request created
          schema:
            $ref: '#/definitions/models.FriendRequest'
      summary: Creates a new friend request
      tags:
      - friends
  /friends/requests/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ID of the friend request
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200": {}
      summary: Delete's a friend request created by the current user
      tags:
      - friends
  /friends/requests/{id}/accept:
    post:
      consumes:
      - application/json
      parameters:
      - description: ID of the friend request
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200": {}
      summary: Accepts an existing friend request
      tags:
      - friends
  /friends/requests/{id}/reject:
    post:
      consumes:
      - application/json
      parameters:
      - description: ID of the friend request
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200": {}
      summary: Rejects an existing friend request
      tags:
      - friends
  /user/calendar:
    get:
      description: Gets the user's calendar events between "timeMin" and "timeMax"
      parameters:
      - description: Lower bound for event's start time to filter by
        in: query
        name: timeMin
        required: true
        type: string
      - description: Upper bound for event's end time to filter by
        in: query
        name: timeMax
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CalendarEvent'
            type: array
      summary: Gets the user's calendar events
      tags:
      - user
  /user/events:
    get:
      description: Returns an array containing all the user's events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - type: object
            - properties:
                events:
                  items:
                    $ref: '#/definitions/models.Event'
                  type: array
                joinedEvents:
                  items:
                    $ref: '#/definitions/models.Event'
                  type: array
              type: object
      summary: Gets all the user's events
      tags:
      - user
  /user/profile:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: A user profile object
          schema:
            $ref: '#/definitions/models.UserProfile'
      summary: Gets the user's profile
      tags:
      - user
  /user/visibility:
    post:
      consumes:
      - application/json
      parameters:
      - description: Visibility of user from 0 to 2
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              visibility:
                type: integer
            type: object
      produces:
      - application/json
      responses:
        "200": {}
      summary: Updates the current user's visibility
      tags:
      - user
  /users:
    get:
      parameters:
      - description: Search query matching users' names/emails
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: An array of user profile objects
          schema:
            items:
              $ref: '#/definitions/models.UserProfile'
            type: array
      summary: Returns users that match the search query
      tags:
      - users
swagger: "2.0"
